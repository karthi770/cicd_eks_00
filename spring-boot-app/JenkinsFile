pipeline {
  agent  any 

  tools {
    maven "Apache Maven 3.6.3"
  }

  environment {
	registry = "634211996823.dkr.ecr.us-east-1.amazonaws.com/spring-boot"
}

  stages {
        stage('Checkout') {
         steps {
            checkout scmGit(branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/karthi770/cicd_eks_00.git']])
        }
        }
        
        stage('Static Code Analysis') {
       environment {
         SONAR_URL = "http://52.207.176.16:9000"
      }
       steps {
         withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
           sh 'cd spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
         }
       }
        }

       stage('Build Jar') {
         steps {
          sh "cd spring-boot-app && mvn clean package"
           sh 'ls -ltr'
         }
      }

      stage("Build image"){
        steps{
          script {
            docker.build registry
          }
        }
      }

      stage("push in ECR"){
        steps{
          sh"aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 634211996823.dkr.ecr.us-east-1.amazonaws.com"
          sh"docker push 634211996823.dkr.ecr.us-east-1.amazonaws.com/spring-boot:latest"
        }
      }

      stage("K8S Deployment"){
        steps{
          withKubeConfig(caCertificate: '', clusterName: '', contextName: '', credentialsId: 'K8S', namespace: '', restrictKubeConfigAccess: false, serverUrl: '') {
            sh "kubectl apply -f deployment.yml"
}

        }
      }

  //   }
  //   stage('Build and Push Docker Image') {
  //     environment {
  //       DOCKER_IMAGE = "abhishekf5/ultimate-cicd:${BUILD_NUMBER}"
  //       // DOCKERFILE_LOCATION = "java-maven-sonar-argocd-helm-k8s/spring-boot-app/Dockerfile"
  //       REGISTRY_CREDENTIALS = credentials('docker-cred')
  //     }
  //     steps {
  //       script {
  //           sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
  //           def dockerImage = docker.image("${DOCKER_IMAGE}")
  //           docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
  //               dockerImage.push()
  //           }
  //       }
  //     }
  //   }
  //   stage('Update Deployment File') {
  //       environment {
  //           GIT_REPO_NAME = "Jenkins-Zero-To-Hero"
  //           GIT_USER_NAME = "iam-veeramalla"
  //       }
  //       steps {
  //           withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
  //               sh '''
  //                   git config user.email "abhishek.xyz@gmail.com"
  //                   git config user.name "Abhishek Veeramalla"
  //                   BUILD_NUMBER=${BUILD_NUMBER}
  //                   sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
  //                   git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
  //                   git commit -m "Update deployment image to version ${BUILD_NUMBER}"
  //                   git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
  //               '''
  //           }
  //       }
  //   }
  // }
}
}